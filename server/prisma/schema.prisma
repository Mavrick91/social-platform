datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  username         String       @unique
  password         String
  firstName        String
  lastName         String
  bio              String?
  avatar           String?
  avatarName       String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  pictures         Picture[]
  comments         Comment[]
  isMock           Boolean      @default(false)
  initiatedFollows Follow[]     @relation("FollowedBy")
  receivedFollows  Follow[]     @relation("Following")
  likes            Like[]
  collections      Collection[]
}

model Collection {
  id        Int                   @id @default(autoincrement())
  name      String
  nameId    String
  isDefault Boolean
  createdAt DateTime              @default(now())
  userId    Int
  user      User                  @relation(fields: [userId], references: [id])
  pictures  PictureOnCollection[]
}

model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  initiator    User     @relation("FollowedBy", fields: [initiatorId], references: [id])
  initiatorId  Int
  targetUser   User     @relation("Following", fields: [targetUserId], references: [id])
  targetUserId Int
}

model Picture {
  id          Int                   @id @default(autoincrement())
  fileName    String
  description String?
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  comments    Comment[]
  likes       Like[]
  collection  PictureOnCollection[]
  sizes       Json
}

model PictureOnCollection {
  pictureId    Int
  picture      Picture    @relation(fields: [pictureId], references: [id])
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([pictureId, collectionId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  picture   Picture  @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  picture   Picture  @relation(fields: [pictureId], references: [id])
  pictureId Int
}
