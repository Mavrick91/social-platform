datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @unique
  password         String
  firstName        String
  lastName         String
  bio              String?
  avatar           String?
  avatarName       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  pictures         Picture[]
  comments         Comment[]
  isMock           Boolean   @default(false)
  initiatedFollows Follow[]  @relation("FollowedBy")
  receivedFollows  Follow[]  @relation("Following")
  likes            Like[]
}

model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  initiator    User     @relation("FollowedBy", fields: [initiatorId], references: [id])
  initiatorId  Int
  targetUser   User     @relation("Following", fields: [targetUserId], references: [id])
  targetUserId Int
}

model Picture {
  id          Int       @id @default(autoincrement())
  fileUrl     String
  fileName    String
  description String?
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  picture   Picture  @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  picture   Picture  @relation(fields: [pictureId], references: [id])
  pictureId Int
}
