datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Notification {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  type       NotificationType
  sender     User             @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   Int
  receiver   User             @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId Int
  picture    Picture?         @relation(fields: [pictureId], references: [id])
  pictureId  Int?
  comment    Comment?         @relation(fields: [commentId], references: [id])
  commentId  Int?

  read Boolean @default(false)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  MESSAGE
  // Add more notification types as needed
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  username              String         @unique
  password              String
  firstName             String
  lastName              String
  bio                   String?
  avatar                String?
  avatarName            String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  pictures              Picture[]
  comments              Comment[]
  isMock                Boolean        @default(false)
  initiatedFollows      Follow[]       @relation("FollowedBy")
  receivedFollows       Follow[]       @relation("Following")
  closeFriends          User[]         @relation("CloseFriends")
  closeFriendsOf        User[]         @relation("CloseFriends")
  likes                 Like[]
  collections           Collection[]
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  thought               Thought?
}

model Thought {
  id         Int        @id @default(autoincrement())
  content    String
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  visibility Visibility @default(FOLLOWERS)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Visibility {
  FOLLOWERS
  CLOSE_FRIENDS
}

model Collection {
  id        Int                   @id @default(autoincrement())
  name      String
  nameId    String
  isDefault Boolean
  createdAt DateTime              @default(now())
  userId    Int
  user      User                  @relation(fields: [userId], references: [id])
  pictures  PictureOnCollection[]
}

model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  initiator    User     @relation("FollowedBy", fields: [initiatorId], references: [id])
  initiatorId  Int
  targetUser   User     @relation("Following", fields: [targetUserId], references: [id])
  targetUserId Int
}

model Picture {
  id                     Int                   @id @default(autoincrement())
  fileName               String
  description            String?
  altText                String?               @default("")
  hideLikesAndViewCounts Boolean               @default(false)
  disableComments        Boolean               @default(false)
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  comments               Comment[]
  likes                  Like[]
  collection             PictureOnCollection[]
  sizes                  Json
  notifications          Notification[]
}

model PictureOnCollection {
  pictureId    Int
  picture      Picture    @relation(fields: [pictureId], references: [id])
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([pictureId, collectionId])
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  picture       Picture        @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId     Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  picture   Picture  @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId Int
}
