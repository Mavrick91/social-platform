# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Follow {
  initiatorId: Float
  targetUserId: Float
  initiator: User
  targetUser: User
}

type Thread {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  messages: [Message!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  user: User!
  thread: Thread!
}

type Comment {
  """The unique identifier of the comment"""
  id: Int!

  """The content of the comment"""
  content: String!

  """The user who created the comment"""
  user: User!
  userId: Int

  """The picture the comment belongs to"""
  picture: Picture
  pictureId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Like {
  id: Float!
  userId: Float!
  pictureId: Float!
  user: User!
  picture: Picture!
}

type PictureCount {
  comments: Int!
  likes: Int!
}

type SizeType {
  thumbnail: String!
  original: String!
  medium: String!
  small: String!
}

type Picture {
  id: Int!
  sizes: SizeType!
  fileName: String!
  hideLikesAndViewCounts: Boolean!
  disableComments: Boolean!
  altText: String!
  description: String
  user: User!
  likes: [Like!]!
  comments: [Comment!]!
  _count: PictureCount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Thought {
  """The unique identifier of the thought"""
  id: Int!
  content: String!
  user: User!
  visibility: Visibility!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Visibility {
  FOLLOWERS
  CLOSE_FRIENDS
}

type Notification {
  id: Int!
  type: String!
  sender: User!
  senderId: Int!
  receiver: User!
  receiverId: Int!
  picture: Picture
  pictureId: Int
  comment: Comment
  commentId: Int
  read: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCount {
  pictures: Int!
  initiatedFollows: Int!
  receivedFollows: Int!
}

type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  _count: UserCount!
  bio: String
  avatar: String
  avatarName: String
  createdAt: DateTime!
  updatedAt: DateTime!
  pictures: [Picture!]!
  comments: [Comment!]!
  isMock: Boolean!
  initiatedFollows: [Follow!]!
  receivedFollows: [Follow!]!
  closeFriends: [User!]!
  closeFriendsOf: [User!]!
  likes: [Like!]!
  collections: [Collection!]!
  sentNotifications: [Notification!]!
  receivedNotifications: [Notification!]!
  thought: Thought
  threads: [Thread!]!
  messages: [Message!]!
}

type PictureOnCollection {
  pictureId: Int!
  picture: Picture!
  collectionId: String!
  collection: Collection!
}

type Collection {
  id: ID!
  name: String!
  nameId: String!
  isDefault: Boolean!
  createdAt: DateTime!
  userId: Int!
  user: User!
  pictures: [PictureOnCollection!]!
}

type PaginatedNotifications {
  notifications: [Notification!]!
  totalCount: Int!
  totalPages: Int!
  currentPage: Int!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

type Query {
  getCollection(collectionName: String!): Collection!
  notifications(page: Int! = 1, limit: Int! = 20): PaginatedNotifications!
  thoughts(userId: Float!): [Thought!]!
  users: [User!]!
  usersByUsername(username: String!): [User!]!
  user(username: String!): User!
  mockedUser: [User!]!
  picturesByUsername(username: String): [Picture!]!
  picturesFromFollowing(userId: [Float!]!): [Picture!]!
  commentsByPictureId(pictureId: Int!): [Comment!]!
  comments: [Comment!]!
  comment(id: Int!): Comment!
  threads: [Thread!]!
  threadsByUserId(userId: Float!): [Thread!]!
  thread(id: Float!): Thread!
  messages: [Message!]!
  message(id: Float!): Message!
}

type Mutation {
  likePicture(pictureId: Float!): Picture!
  unlikePicture(likeId: Float!): Picture!
  addPictureToCollection(collectionId: Float!, pictureId: [Float!]!): [PictureOnCollection!]!
  removePictureFromCollection(pictureId: Float!): [Collection!]!
  createCollection(name: String!): Collection!
  deleteCollection(collectionId: Float!): Collection!
  updateNameCollection(collectionId: Float!, newName: String!): Collection!
  deleteAllCollectionsForUser(userId: Float!): Collection!
  markNotificationsAsRead(notificationIds: [Int!]!): [Notification!]!
  createThought(createThoughtInput: CreateThoughtInput!): Thought!
  updateThought(updateThoughtInput: UpdateThoughtInput!): Thought!
  deleteThought(id: Float!): Thought!
  updateUser(username: String!, updateUserInput: UpdateUserDto!): User!
  createUser(createUserInput: CreateUserDto!): User!
  login(email: String!, password: String!): LoginResponse!
  createPicture(input: CreatePictureInput!): Picture!
  updatePicture(id: Float!, input: UpdatePictureInput!): Picture!
  deletePicture(id: Float!): Picture!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  followUser(input: FollowDto!): Follow!
  unfollowUser(input: UnfollowDto!): Follow!
  createThread(createThreadInput: CreateThreadInput!): Thread!
  createMessage(createMessageInput: CreateMessageInput!): Message!
}

input CreateThoughtInput {
  content: String!
  userId: Float!
  visibility: Visibility!
}

input UpdateThoughtInput {
  id: Float!
  content: String!
  visibility: Visibility!
}

input UpdateUserDto {
  firstName: String!
  lastName: String!
  bio: String
  avatar: String
  avatarName: String
}

input CreateUserDto {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  username: String!
}

input CreatePictureInput {
  sizes: SizeInput!
  fileName: String!
  description: String
  altText: String
  hideLikesAndViewCounts: Boolean! = false
  disableComments: Boolean! = false
}

input SizeInput {
  thumbnail: String!
  original: String!
  medium: String!
  small: String!
}

input UpdatePictureInput {
  description: String
  altText: String
  disableComments: Boolean
  hideLikesAndViewCounts: Boolean
}

input CreateCommentInput {
  """The content of the comment"""
  content: String!

  """The ID of the user who created the comment"""
  userId: Int!

  """The ID of the picture the comment belongs to"""
  pictureId: Int!
}

input UpdateCommentInput {
  """The content of the comment"""
  content: String

  """The ID of the user who created the comment"""
  userId: Int

  """The ID of the picture the comment belongs to"""
  pictureId: Int
  id: Int!
}

input FollowDto {
  userId: Float!
  followingId: Float!
}

input UnfollowDto {
  userId: Float!
  followingId: Float!
}

input CreateThreadInput {
  userIds: [Float!]!
}

input CreateMessageInput {
  content: String!
  userId: Float!
  threadId: Float!
}

type Subscription {
  notificationAdded(userId: Int!): Notification!
  messageAdded(threadId: Float!): Message!
}